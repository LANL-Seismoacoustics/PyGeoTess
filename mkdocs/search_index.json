{
    "docs": [
        {
            "location": "/", 
            "text": "PyGeoTess\n\n\nGeoTess for Python programmers.\n\n\nPyGeoTess is a Python interface module to the\n\nGeoTess\n gridding and earth model library from\nSandia National Laboratories.  It provides two interfaces to a subset of the\nGeoTess library: a direct interface to the GeoTess c++ classes and methods,\nand a more Pythonic interface.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#pygeotess", 
            "text": "GeoTess for Python programmers.  PyGeoTess is a Python interface module to the GeoTess  gridding and earth model library from\nSandia National Laboratories.  It provides two interfaces to a subset of the\nGeoTess library: a direct interface to the GeoTess c++ classes and methods,\nand a more Pythonic interface.", 
            "title": "PyGeoTess"
        }, 
        {
            "location": "/grids/", 
            "text": "Load a grid\n\n\nGrids are made using a Java utility called \nGeoTessBuilder\n.  Loading them into\nmemory from file is the standard constructor in PyGeoTess.  Viewing grid metadata is as simple as using \nprint\n or \nstr\n.\n\n\nfrom geotess import Grid\n\ngrid = Grid('geotess/data/geotess_grid_16000.geotess')\nprint(grid)\n\n\n\n\nGeoTessGrid\ngridID = 4FD3D72E55EFA8E13CA096B4C8795F03\nmemory : 0.11776 MB\ninput Grid File : geotess/data/geotess_grid_16000.geotess\ngenerated by software version : GridBuilder 0.0.0  Fri May 25 11:34:59 MDT 2012\n\nnTessellations = 1\nnLevels = 3\nnVertices = 162\nnTriangles = 420\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420\n\n\n\n\nBuilt-in grids\n\n\nThe grids and models that GeoTess distributes are also part of PyGeoTess.  The files are found in \ngeotess/data\n, but they are also pre-loaded into class instances.  Here, we simply import the previous grid.\n\n\nfrom geotess.data import grid_16000\n\nprint(grid_16000)\n\n\n\n\nGeoTessGrid\ngridID = 4FD3D72E55EFA8E13CA096B4C8795F03\nmemory : 0.11776 MB\ninput Grid File : geotess/data/geotess_grid_16000.geotess\ngenerated by software version : GridBuilder 0.0.0  Fri May 25 11:34:59 MDT 2012\n\nnTessellations = 1\nnLevels = 3\nnVertices = 162\nnTriangles = 420\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420\n\n\n\n\nVertices and triangles\n\n\nIn PyGeoTess, Grid vertices are geocentric coordinates of points of intersection on a tessellation, and triangles are the three integer vertex indices that form a triangle in the tessellation.  For a given grid, all vertices are accessible via the \nGrid.vertices\n method, and the triangles (vertex associations) for a particular tessellation and level are gotten with the \nGrid.triangles\n method.\n\n\nvertices = grid.vertices()\ntriangles = grid.triangles(tess=0, level=2)\n\nprint(\nThe first 10 vertices are:\\n{}\n.format(vertices[:10]))\nprint(\nThe first 10 triangles are:\\n{}\n.format(triangles[:10]))\n\n\n\n\nThe first 10 vertices are:\n[[   0.           90.        ]\n [  72.           26.71930078]\n [   0.           26.71930078]\n [ 144.           26.71930078]\n [-144.           26.71930078]\n [ -72.           26.71930078]\n [  36.          -26.71930078]\n [ 108.          -26.71930078]\n [-180.          -26.71930078]\n [-108.          -26.71930078]]\nThe first 10 triangles are:\n[[42 43 44]\n [12 44 43]\n [13 42 44]\n [14 43 42]\n [42 45 46]\n [ 0 46 45]\n [14 42 46]\n [13 45 42]\n [43 47 48]\n [ 1 48 47]]\n\n\n\n\nPlotting grids\n\n\nThe \n.vertices\n and \n.triangles\n methods above return arrays that are amenable\nto plotting using Matplotlib's\n\ntriplot\n\nfunction.  We'll project first using Matplotlib\n\nBasemap\n.\n\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\n\nm = Basemap(projection='ortho',lat_0=45,lon_0=-100)\nm.etopo()\nx, y = m(vertices[:,0], vertices[:,1])\n\nplt.triplot(vertices[:,0], vertices[:,1], triangles);\n\n\n\n\n\n\nThe cirularity of vertex longitudes makes plotting a bit wonky.  Luckily,\nMatplotlib has the tools\n\nTriangulation\n\nand\n\nTriAnalyzer\n\nto mask out these long, flat triangles from the plot.\n\n\nfrom matplotlib.tri import Triangulation, TriAnalyzer\n\ntri = Triangulation(x, y, triangles)\ntri_an = TriAnalyzer(tri)\nmask = tri_an.get_flat_tri_mask()\n\nplt.triplot(x, y, triangles, mask=mask)\n\n\n\n\n\n\nNot perfect, but not as messy.", 
            "title": "Grids"
        }, 
        {
            "location": "/grids/#load-a-grid", 
            "text": "Grids are made using a Java utility called  GeoTessBuilder .  Loading them into\nmemory from file is the standard constructor in PyGeoTess.  Viewing grid metadata is as simple as using  print  or  str .  from geotess import Grid\n\ngrid = Grid('geotess/data/geotess_grid_16000.geotess')\nprint(grid)  GeoTessGrid\ngridID = 4FD3D72E55EFA8E13CA096B4C8795F03\nmemory : 0.11776 MB\ninput Grid File : geotess/data/geotess_grid_16000.geotess\ngenerated by software version : GridBuilder 0.0.0  Fri May 25 11:34:59 MDT 2012\n\nnTessellations = 1\nnLevels = 3\nnVertices = 162\nnTriangles = 420\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420", 
            "title": "Load a grid"
        }, 
        {
            "location": "/grids/#built-in-grids", 
            "text": "The grids and models that GeoTess distributes are also part of PyGeoTess.  The files are found in  geotess/data , but they are also pre-loaded into class instances.  Here, we simply import the previous grid.  from geotess.data import grid_16000\n\nprint(grid_16000)  GeoTessGrid\ngridID = 4FD3D72E55EFA8E13CA096B4C8795F03\nmemory : 0.11776 MB\ninput Grid File : geotess/data/geotess_grid_16000.geotess\ngenerated by software version : GridBuilder 0.0.0  Fri May 25 11:34:59 MDT 2012\n\nnTessellations = 1\nnLevels = 3\nnVertices = 162\nnTriangles = 420\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420", 
            "title": "Built-in grids"
        }, 
        {
            "location": "/grids/#vertices-and-triangles", 
            "text": "In PyGeoTess, Grid vertices are geocentric coordinates of points of intersection on a tessellation, and triangles are the three integer vertex indices that form a triangle in the tessellation.  For a given grid, all vertices are accessible via the  Grid.vertices  method, and the triangles (vertex associations) for a particular tessellation and level are gotten with the  Grid.triangles  method.  vertices = grid.vertices()\ntriangles = grid.triangles(tess=0, level=2)\n\nprint( The first 10 vertices are:\\n{} .format(vertices[:10]))\nprint( The first 10 triangles are:\\n{} .format(triangles[:10]))  The first 10 vertices are:\n[[   0.           90.        ]\n [  72.           26.71930078]\n [   0.           26.71930078]\n [ 144.           26.71930078]\n [-144.           26.71930078]\n [ -72.           26.71930078]\n [  36.          -26.71930078]\n [ 108.          -26.71930078]\n [-180.          -26.71930078]\n [-108.          -26.71930078]]\nThe first 10 triangles are:\n[[42 43 44]\n [12 44 43]\n [13 42 44]\n [14 43 42]\n [42 45 46]\n [ 0 46 45]\n [14 42 46]\n [13 45 42]\n [43 47 48]\n [ 1 48 47]]", 
            "title": "Vertices and triangles"
        }, 
        {
            "location": "/grids/#plotting-grids", 
            "text": "The  .vertices  and  .triangles  methods above return arrays that are amenable\nto plotting using Matplotlib's triplot \nfunction.  We'll project first using Matplotlib Basemap .  import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\n\nm = Basemap(projection='ortho',lat_0=45,lon_0=-100)\nm.etopo()\nx, y = m(vertices[:,0], vertices[:,1])\n\nplt.triplot(vertices[:,0], vertices[:,1], triangles);   The cirularity of vertex longitudes makes plotting a bit wonky.  Luckily,\nMatplotlib has the tools Triangulation \nand TriAnalyzer \nto mask out these long, flat triangles from the plot.  from matplotlib.tri import Triangulation, TriAnalyzer\n\ntri = Triangulation(x, y, triangles)\ntri_an = TriAnalyzer(tri)\nmask = tri_an.get_flat_tri_mask()\n\nplt.triplot(x, y, triangles, mask=mask)   Not perfect, but not as messy.", 
            "title": "Plotting grids"
        }, 
        {
            "location": "/models/", 
            "text": "Models can be loaded from file, or constructed from scratch (a grid file is still required).\n\n\nLoad from file\n\n\nfrom geotess import Model\n\nmodel = Model.read('geotess/data/crust20.geotess')\nprint(model)\n\n\n\n\n********************************************************************************\n\nGeoTessModel:\nOS: Undefined 64-bit mode\nInput Model File: geotess/data/crust20.geotess\nInput Grid File: *\n\nGenerated by: GeoModel 7.0.1  Wed April 18 15:21:51 2012\nModel Load Time: 0.000 sec\nMemory footprint: 18.5971 MB\n\nModel Description: \nThe Crust 2.0 model of Bassin, Laske and Masters (2000).\n\nBassin, C., Laske, G. and Masters, G., \nThe Current Limits of Resolution for Surface Wave \nTomography in North America, EOS Trans AGU, 81, F897, 2000.\n\nhttp://igppweb.ucsd.edu/~gabi/crust2.html\n\nThe original model was defined on a regular latitude-longitude\ngrid with 2 degree by 2 degree spacing.  It was cell-based,\nmeaning that the model attributes (p velocity, s velocity and\ndensity) were attached to the cells, not the nodes at the \ncorners of the cells.\n\nThis representation uses a triangular tessellation with \n1 degree edge lengths and it is node based, meaning that\nthe attributes are attached to the nodes at the corners\nof the triangles, not the triangles.  The translation\nwas accomplished by first defining a node at the center \nof each 2 degree cell in the original model and then\ninterpolating attribute values at the nodes of the \nnew model using simple bi-linear interpolation.  There\nwas certainly some interpolation error involved in this \nprocess.\n\nIn this representation, the water layer has been omitted.\nThe top of the new model is the surface of the solid \nEarth.  While the thickness of the water layer in the \noceans can be deduced in the new model by assuming that\nthe surface of the oceans corresponds to depth zero, the\nthickness of the water layer in large inland lakes and\nseas has been lost.\n\nIn the new representation, layer boundaries are defined in \nterms of radius, not depth.  Depths in the original model\nwere converted to radius using the radius of the WGS84\nellipsoid.\n\nSandy Ballard\nSandia National Laboratories\nsballar@sandia.gov\n4/14/2012\n\nend description\n\n\nEarthShape: WGS84\nDataType: FLOAT\nAttributes: \n  0:  vp  (km/sec)\n  1:  vs  (km/sec)\n  2:  density  (g/cc)\n\nLayers: \n  Index  TessId    Name\n   6       0     ice\n   5       0     soft_sediments\n   4       0     hard_sediments\n   3       0     upper_crust\n   2       0     middle_crust\n   1       0     lower_crust\n   0       0     mantle\n\n\nLayer  connected   number    profile   profile    profile  profile  profile  profile\nIndex  vertices   of points  npoints   constant    thin     empty   surface surfemtpy\n-----  --------   ---------  -------   --------   ------   -------  -------  -------\n   6    40962        40962         0       1542    39420         0       0       0\n   5    40962        40962         0      39267     1695         0       0       0\n   4    40962        40962         0      13561    27401         0       0       0\n   3    40962        40962         0      40962        0         0       0       0\n   2    40962        40962         0      40962        0         0       0       0\n   1    40962        40962         0      40962        0         0       0       0\n   0    40962        40962         0          0    40962         0       0       0\n-----  --------   ---------  -------   --------   ------   -------  -------  -------\nTotal   40962       286734         0     177256   109478         0       0       0\n\nGeoTessGrid\ngridID = 808785948EB2350DD44E6C29BDEA6CAE\nmemory : 34.2188 MB\ninput Grid File : geotess/data/crust10.geotess\ngenerated by software version : GeoModel 7.0.1  Wed April 18 15:21:51 2012\n\nnTessellations = 1\nnLevels = 7\nnVertices = 40962\nnTriangles = 109220\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420\n      0        3        3     1280      420     1700\n      0        4        4     5120     1700     6820\n      0        5        5    20480     6820    27300\n      0        6        6    81920    27300   109220\n\n\n********************************************************************************\n\n\n\n\nEach \nModel\n has a \n.grid\n, which provides access to that Model's Grid instance.\n\n\nJust like with \nGrids\n, PyGeoTess is distribed with the same GeoTess model files, like Crust2.0, which can be directly imported.\n\n\nfrom geotess.data import crust20\n\nprint(crust20)\n\n\n\n\n********************************************************************************\n\nGeoTessModel:\nOS: Undefined 64-bit mode\nInput Model File: geotess/data/crust20.geotess\nInput Grid File: *\n\nGenerated by: GeoModel 7.0.1  Wed April 18 15:21:51 2012\nModel Load Time: 1.000 sec\nMemory footprint: 18.5971 MB\n\nModel Description: \nThe Crust 2.0 model of Bassin, Laske and Masters (2000).\n\nBassin, C., Laske, G. and Masters, G., \nThe Current Limits of Resolution for Surface Wave \nTomography in North America, EOS Trans AGU, 81, F897, 2000.\n\nhttp://igppweb.ucsd.edu/~gabi/crust2.html\n\nThe original model was defined on a regular latitude-longitude\ngrid with 2 degree by 2 degree spacing.  It was cell-based,\nmeaning that the model attributes (p velocity, s velocity and\ndensity) were attached to the cells, not the nodes at the \ncorners of the cells.\n\nThis representation uses a triangular tessellation with \n1 degree edge lengths and it is node based, meaning that\nthe attributes are attached to the nodes at the corners\nof the triangles, not the triangles.  The translation\nwas accomplished by first defining a node at the center \nof each 2 degree cell in the original model and then\ninterpolating attribute values at the nodes of the \nnew model using simple bi-linear interpolation.  There\nwas certainly some interpolation error involved in this \nprocess.\n\nIn this representation, the water layer has been omitted.\nThe top of the new model is the surface of the solid \nEarth.  While the thickness of the water layer in the \noceans can be deduced in the new model by assuming that\nthe surface of the oceans corresponds to depth zero, the\nthickness of the water layer in large inland lakes and\nseas has been lost.\n\nIn the new representation, layer boundaries are defined in \nterms of radius, not depth.  Depths in the original model\nwere converted to radius using the radius of the WGS84\nellipsoid.\n\nSandy Ballard\nSandia National Laboratories\nsballar@sandia.gov\n4/14/2012\n\nend description\n\n\nEarthShape: WGS84\nDataType: FLOAT\nAttributes: \n  0:  vp  (km/sec)\n  1:  vs  (km/sec)\n  2:  density  (g/cc)\n\nLayers: \n  Index  TessId    Name\n   6       0     ice\n   5       0     soft_sediments\n   4       0     hard_sediments\n   3       0     upper_crust\n   2       0     middle_crust\n   1       0     lower_crust\n   0       0     mantle\n\n\nLayer  connected   number    profile   profile    profile  profile  profile  profile\nIndex  vertices   of points  npoints   constant    thin     empty   surface surfemtpy\n-----  --------   ---------  -------   --------   ------   -------  -------  -------\n   6    40962        40962         0       1542    39420         0       0       0\n   5    40962        40962         0      39267     1695         0       0       0\n   4    40962        40962         0      13561    27401         0       0       0\n   3    40962        40962         0      40962        0         0       0       0\n   2    40962        40962         0      40962        0         0       0       0\n   1    40962        40962         0      40962        0         0       0       0\n   0    40962        40962         0          0    40962         0       0       0\n-----  --------   ---------  -------   --------   ------   -------  -------  -------\nTotal   40962       286734         0     177256   109478         0       0       0\n\nGeoTessGrid\ngridID = 808785948EB2350DD44E6C29BDEA6CAE\nmemory : 34.2188 MB\ninput Grid File : geotess/data/crust10.geotess\ngenerated by software version : GeoModel 7.0.1  Wed April 18 15:21:51 2012\n\nnTessellations = 1\nnLevels = 7\nnVertices = 40962\nnTriangles = 109220\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420\n      0        3        3     1280      420     1700\n      0        4        4     5120     1700     6820\n      0        5        5    20480     6820    27300\n      0        6        6    81920    27300   109220\n\n\n********************************************************************************\n\n\n\n\nCreate a Model from scratch\n\n\nCreating a GeoTessModel from scratch requires a grid file, some layers, and some attributes.  PyGeoTess describes layers with 2-tuples.  The first entry is the layer name, the second is the correspoding tessellation id.  Similarly, with names and units, for attributes.  Convenience \nnamedtuple\n are provided, for readability.\n\n\n# look at the grid, so you can assign layers to tessellation ids.\nfrom geotess.data import grid_16000\nfrom geotess import Model, Layer, Attribute\n\nprint(grid_16000)\n\n\n\n\nGeoTessGrid\ngridID = 4FD3D72E55EFA8E13CA096B4C8795F03\nmemory : 0.11776 MB\ninput Grid File : geotess/data/geotess_grid_16000.geotess\ngenerated by software version : GridBuilder 0.0.0  Fri May 25 11:34:59 MDT 2012\n\nnTessellations = 1\nnLevels = 3\nnVertices = 162\nnTriangles = 420\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420\n\n\n\n\ncrust = Layer(name='crust', tess_id=0)\nmantle = Layer('mantle', 0)\n\nVp = Attribute(name='Vp', unit='km/s')\nVs = Attribute('Vs', 'km/s')\n\ndesc = \nMy awesome model.\n\nmodel = Model('geotess/data/geotess_grid_16000.geotess', layers=[crust, mantle], attributes=[Vp, Vs], \n              dtype='float', earth_shape='wgs84', rconst=False, description=desc)\n\nprint(model)\n\n\n\n\n********************************************************************************\n\nGeoTessModel:\nOS: Undefined 64-bit mode\nInput Model File: none\nInput Grid File: geotess/data/geotess_grid_16000.geotess\n\nGenerated by: PyGeoTess v0.1.1  2015-11-18 15:35:20.303894\nModel Load Time: -1.000 sec\nMemory footprint: 0.000646591 MB\n\nModel Description: \nMy awesome model.\n\nend description\n\n\nEarthShape: WGS84\nDataType: FLOAT\nAttributes: \n  0:  Vp  (km/s)\n  1:  Vs  (km/s)\n\nLayers: \n  Index  TessId    Name\n   1       0     MANTLE\n   0       0     CRUST\n\n\nGeoTessGrid\ngridID = 4FD3D72E55EFA8E13CA096B4C8795F03\nmemory : 0.11776 MB\ninput Grid File : geotess/data/geotess_grid_16000.geotess\ngenerated by software version : GridBuilder 0.0.0  Fri May 25 11:34:59 MDT 2012\n\nnTessellations = 1\nnLevels = 3\nnVertices = 162\nnTriangles = 420\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420\n\n\n********************************************************************************\n\n\n\n\nNow, let's save it.\n\n\n# binary version\nmodel.write('myawesome.geotess')\n\n# ascii version\nmodel.write('myawesome.ascii')\n\n\n\n\nRoadmap\n\n\nMake PyGeoTess work with both the standard CPython interpretor, using the GeoTess\nc++ library and Cython, and the \nJython\n Python interpeter,\nusing the GeoTess Java library.", 
            "title": "Models"
        }, 
        {
            "location": "/models/#load-from-file", 
            "text": "from geotess import Model\n\nmodel = Model.read('geotess/data/crust20.geotess')\nprint(model)  ********************************************************************************\n\nGeoTessModel:\nOS: Undefined 64-bit mode\nInput Model File: geotess/data/crust20.geotess\nInput Grid File: *\n\nGenerated by: GeoModel 7.0.1  Wed April 18 15:21:51 2012\nModel Load Time: 0.000 sec\nMemory footprint: 18.5971 MB\n\nModel Description: \nThe Crust 2.0 model of Bassin, Laske and Masters (2000).\n\nBassin, C., Laske, G. and Masters, G., \nThe Current Limits of Resolution for Surface Wave \nTomography in North America, EOS Trans AGU, 81, F897, 2000.\n\nhttp://igppweb.ucsd.edu/~gabi/crust2.html\n\nThe original model was defined on a regular latitude-longitude\ngrid with 2 degree by 2 degree spacing.  It was cell-based,\nmeaning that the model attributes (p velocity, s velocity and\ndensity) were attached to the cells, not the nodes at the \ncorners of the cells.\n\nThis representation uses a triangular tessellation with \n1 degree edge lengths and it is node based, meaning that\nthe attributes are attached to the nodes at the corners\nof the triangles, not the triangles.  The translation\nwas accomplished by first defining a node at the center \nof each 2 degree cell in the original model and then\ninterpolating attribute values at the nodes of the \nnew model using simple bi-linear interpolation.  There\nwas certainly some interpolation error involved in this \nprocess.\n\nIn this representation, the water layer has been omitted.\nThe top of the new model is the surface of the solid \nEarth.  While the thickness of the water layer in the \noceans can be deduced in the new model by assuming that\nthe surface of the oceans corresponds to depth zero, the\nthickness of the water layer in large inland lakes and\nseas has been lost.\n\nIn the new representation, layer boundaries are defined in \nterms of radius, not depth.  Depths in the original model\nwere converted to radius using the radius of the WGS84\nellipsoid.\n\nSandy Ballard\nSandia National Laboratories\nsballar@sandia.gov\n4/14/2012 end description \n\nEarthShape: WGS84\nDataType: FLOAT\nAttributes: \n  0:  vp  (km/sec)\n  1:  vs  (km/sec)\n  2:  density  (g/cc)\n\nLayers: \n  Index  TessId    Name\n   6       0     ice\n   5       0     soft_sediments\n   4       0     hard_sediments\n   3       0     upper_crust\n   2       0     middle_crust\n   1       0     lower_crust\n   0       0     mantle\n\n\nLayer  connected   number    profile   profile    profile  profile  profile  profile\nIndex  vertices   of points  npoints   constant    thin     empty   surface surfemtpy\n-----  --------   ---------  -------   --------   ------   -------  -------  -------\n   6    40962        40962         0       1542    39420         0       0       0\n   5    40962        40962         0      39267     1695         0       0       0\n   4    40962        40962         0      13561    27401         0       0       0\n   3    40962        40962         0      40962        0         0       0       0\n   2    40962        40962         0      40962        0         0       0       0\n   1    40962        40962         0      40962        0         0       0       0\n   0    40962        40962         0          0    40962         0       0       0\n-----  --------   ---------  -------   --------   ------   -------  -------  -------\nTotal   40962       286734         0     177256   109478         0       0       0\n\nGeoTessGrid\ngridID = 808785948EB2350DD44E6C29BDEA6CAE\nmemory : 34.2188 MB\ninput Grid File : geotess/data/crust10.geotess\ngenerated by software version : GeoModel 7.0.1  Wed April 18 15:21:51 2012\n\nnTessellations = 1\nnLevels = 7\nnVertices = 40962\nnTriangles = 109220\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420\n      0        3        3     1280      420     1700\n      0        4        4     5120     1700     6820\n      0        5        5    20480     6820    27300\n      0        6        6    81920    27300   109220\n\n\n********************************************************************************  Each  Model  has a  .grid , which provides access to that Model's Grid instance.  Just like with  Grids , PyGeoTess is distribed with the same GeoTess model files, like Crust2.0, which can be directly imported.  from geotess.data import crust20\n\nprint(crust20)  ********************************************************************************\n\nGeoTessModel:\nOS: Undefined 64-bit mode\nInput Model File: geotess/data/crust20.geotess\nInput Grid File: *\n\nGenerated by: GeoModel 7.0.1  Wed April 18 15:21:51 2012\nModel Load Time: 1.000 sec\nMemory footprint: 18.5971 MB\n\nModel Description: \nThe Crust 2.0 model of Bassin, Laske and Masters (2000).\n\nBassin, C., Laske, G. and Masters, G., \nThe Current Limits of Resolution for Surface Wave \nTomography in North America, EOS Trans AGU, 81, F897, 2000.\n\nhttp://igppweb.ucsd.edu/~gabi/crust2.html\n\nThe original model was defined on a regular latitude-longitude\ngrid with 2 degree by 2 degree spacing.  It was cell-based,\nmeaning that the model attributes (p velocity, s velocity and\ndensity) were attached to the cells, not the nodes at the \ncorners of the cells.\n\nThis representation uses a triangular tessellation with \n1 degree edge lengths and it is node based, meaning that\nthe attributes are attached to the nodes at the corners\nof the triangles, not the triangles.  The translation\nwas accomplished by first defining a node at the center \nof each 2 degree cell in the original model and then\ninterpolating attribute values at the nodes of the \nnew model using simple bi-linear interpolation.  There\nwas certainly some interpolation error involved in this \nprocess.\n\nIn this representation, the water layer has been omitted.\nThe top of the new model is the surface of the solid \nEarth.  While the thickness of the water layer in the \noceans can be deduced in the new model by assuming that\nthe surface of the oceans corresponds to depth zero, the\nthickness of the water layer in large inland lakes and\nseas has been lost.\n\nIn the new representation, layer boundaries are defined in \nterms of radius, not depth.  Depths in the original model\nwere converted to radius using the radius of the WGS84\nellipsoid.\n\nSandy Ballard\nSandia National Laboratories\nsballar@sandia.gov\n4/14/2012 end description \n\nEarthShape: WGS84\nDataType: FLOAT\nAttributes: \n  0:  vp  (km/sec)\n  1:  vs  (km/sec)\n  2:  density  (g/cc)\n\nLayers: \n  Index  TessId    Name\n   6       0     ice\n   5       0     soft_sediments\n   4       0     hard_sediments\n   3       0     upper_crust\n   2       0     middle_crust\n   1       0     lower_crust\n   0       0     mantle\n\n\nLayer  connected   number    profile   profile    profile  profile  profile  profile\nIndex  vertices   of points  npoints   constant    thin     empty   surface surfemtpy\n-----  --------   ---------  -------   --------   ------   -------  -------  -------\n   6    40962        40962         0       1542    39420         0       0       0\n   5    40962        40962         0      39267     1695         0       0       0\n   4    40962        40962         0      13561    27401         0       0       0\n   3    40962        40962         0      40962        0         0       0       0\n   2    40962        40962         0      40962        0         0       0       0\n   1    40962        40962         0      40962        0         0       0       0\n   0    40962        40962         0          0    40962         0       0       0\n-----  --------   ---------  -------   --------   ------   -------  -------  -------\nTotal   40962       286734         0     177256   109478         0       0       0\n\nGeoTessGrid\ngridID = 808785948EB2350DD44E6C29BDEA6CAE\nmemory : 34.2188 MB\ninput Grid File : geotess/data/crust10.geotess\ngenerated by software version : GeoModel 7.0.1  Wed April 18 15:21:51 2012\n\nnTessellations = 1\nnLevels = 7\nnVertices = 40962\nnTriangles = 109220\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420\n      0        3        3     1280      420     1700\n      0        4        4     5120     1700     6820\n      0        5        5    20480     6820    27300\n      0        6        6    81920    27300   109220\n\n\n********************************************************************************", 
            "title": "Load from file"
        }, 
        {
            "location": "/models/#create-a-model-from-scratch", 
            "text": "Creating a GeoTessModel from scratch requires a grid file, some layers, and some attributes.  PyGeoTess describes layers with 2-tuples.  The first entry is the layer name, the second is the correspoding tessellation id.  Similarly, with names and units, for attributes.  Convenience  namedtuple  are provided, for readability.  # look at the grid, so you can assign layers to tessellation ids.\nfrom geotess.data import grid_16000\nfrom geotess import Model, Layer, Attribute\n\nprint(grid_16000)  GeoTessGrid\ngridID = 4FD3D72E55EFA8E13CA096B4C8795F03\nmemory : 0.11776 MB\ninput Grid File : geotess/data/geotess_grid_16000.geotess\ngenerated by software version : GridBuilder 0.0.0  Fri May 25 11:34:59 MDT 2012\n\nnTessellations = 1\nnLevels = 3\nnVertices = 162\nnTriangles = 420\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420  crust = Layer(name='crust', tess_id=0)\nmantle = Layer('mantle', 0)\n\nVp = Attribute(name='Vp', unit='km/s')\nVs = Attribute('Vs', 'km/s')\n\ndesc =  My awesome model. \nmodel = Model('geotess/data/geotess_grid_16000.geotess', layers=[crust, mantle], attributes=[Vp, Vs], \n              dtype='float', earth_shape='wgs84', rconst=False, description=desc)\n\nprint(model)  ********************************************************************************\n\nGeoTessModel:\nOS: Undefined 64-bit mode\nInput Model File: none\nInput Grid File: geotess/data/geotess_grid_16000.geotess\n\nGenerated by: PyGeoTess v0.1.1  2015-11-18 15:35:20.303894\nModel Load Time: -1.000 sec\nMemory footprint: 0.000646591 MB\n\nModel Description: \nMy awesome model. end description \n\nEarthShape: WGS84\nDataType: FLOAT\nAttributes: \n  0:  Vp  (km/s)\n  1:  Vs  (km/s)\n\nLayers: \n  Index  TessId    Name\n   1       0     MANTLE\n   0       0     CRUST\n\n\nGeoTessGrid\ngridID = 4FD3D72E55EFA8E13CA096B4C8795F03\nmemory : 0.11776 MB\ninput Grid File : geotess/data/geotess_grid_16000.geotess\ngenerated by software version : GridBuilder 0.0.0  Fri May 25 11:34:59 MDT 2012\n\nnTessellations = 1\nnLevels = 3\nnVertices = 162\nnTriangles = 420\n\n    Tess    Level  LevelID     NTri    First   Last+1\n      0        0        0       20        0       20\n      0        1        1       80       20      100\n      0        2        2      320      100      420\n\n\n********************************************************************************  Now, let's save it.  # binary version\nmodel.write('myawesome.geotess')\n\n# ascii version\nmodel.write('myawesome.ascii')", 
            "title": "Create a Model from scratch"
        }, 
        {
            "location": "/models/#roadmap", 
            "text": "Make PyGeoTess work with both the standard CPython interpretor, using the GeoTess\nc++ library and Cython, and the  Jython  Python interpeter,\nusing the GeoTess Java library.", 
            "title": "Roadmap"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2016, Los Alamos National Security, LLC\n\n\nAll rights reserved.\n\n\nCopyright 2016. Los Alamos National Security, LLC. This software was produced\nunder U.S. Government contract DE-AC52-06NA25396 for Los Alamos National\nLaboratory (LANL), which is operated by Los Alamos National Security, LLC for\nthe U.S. Department of Energy. The U.S. Government has rights to use,\nreproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS\nNATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY\nLIABILITY FOR THE USE OF THIS SOFTWARE.  If software is modified to produce\nderivative works, such modified software should be clearly marked, so as not to\nconfuse it with the version available from LANL.\n\n\nBSD Open Source License.\n\n\nAdditionally, redistribution and use in source and binary forms, with or\nwithout modification, are permitted provided that the following conditions are\nmet:\n\n\n\n\nRedistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n\nRedistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n\nNeither the name of Los Alamos National Security, LLC, Los Alamos National\n   Laboratory, LANL, the U.S. Government, nor the names of its contributors may\n   be used to endorse or promote products derived from this software without\n   specific prior written permission.\n\n\n\n\nTHIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\nOF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\nOF SUCH DAMAGE.", 
            "title": "License"
        }
    ]
}